# RUN: llc -mtriple=x86_64-- --yk-stackmap-add-locs %s -o - | FileCheck %s

# Check that additional locations are only added to stackmaps if those
# locations are valid on all paths this block is in. Here, for example, there's
# an additional location `-8` for `$r13` in `bb.1`. However, `bb.1` is in a
# loop which later overwrites `$r13`. On the next iteration the additional
# location `-8` would no longer be valid for `$r13` and thus needs to be
# removed.

# CHECK-LABEL: __LLVM_StackMaps:
# CHECK-LABEL: .quad 9
# CHECK-LABEL: .short 8
# CHECK-NEXT: .short 13
# CHECK-NEXT: .short 0
# CHECK-NEXT: .short 0
# CHECK-NEXT: .long 0

# Check that additional locations that are valid on all paths are still being
# encoded.

# CHECK-LABEL: .short 14
# CHECK-NEXT: .short 0
# CHECK-NEXT: .short 1
# CHECK-NEXT: .short -24
# CHECK-NEXT: .long 0
---
name: main
tracksRegLiveness: true
frameInfo:
  hasStackMap:     true
  stackSize:       24
stack:
  - { id: 0, type: spill-slot, offset: -8, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, offset: -16, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, offset: -24, size: 8, alignment: 8 }
body: |
  bb.0:
    successors: %bb.1
    $rbp = frame-setup MOV64rr $rsp
    $r13 = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %stack.0)
    $r14 = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %stack.0)
    JMP_1 %bb.1

  bb.1:
  ; predecessors: %bb.0, %bb.2
    liveins: $r13, $r14
    STACKMAP 9, 0, $r13, $r14, 3
    $r14 = MOV64rr $r13
    JMP_1 %bb.2

  bb.2:
  ; predecessors: %bb.1
    liveins: $r13, $r14
    $r13 = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %stack.1)
    $r14 = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %stack.0)
    renamable $rax = MOV64rr $r13, implicit-def $rax
    CMP32ri renamable $eax, 50, implicit-def $eflags
    JCC_1 %bb.1, 2, implicit $eflags

  bb.3:
  ; predecessors: %bb.2
    liveins: $rax
    RET64 $rax
